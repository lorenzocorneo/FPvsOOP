@article{Jordan2015120,
title = "A feature model of actor, agent, functional, object, and procedural programming languages ",
journal = "Science of Computer Programming ",
volume = "98, Part 2",
number = "",
pages = "120 - 139",
year = "2015",
note = "Special Issue on Programming Based on Actors, Agents and Decentralized Control ",
issn = "0167-6423",
doi = "http://dx.doi.org/10.1016/j.scico.2014.02.009",
url = "http://www.sciencedirect.com/science/article/pii/S0167642314000501",
author = "Howell Jordan and Goetz Botterweck and John Noll and Andrew Butterfield and Rem Collier",
keywords = "Programming languages",
keywords = "Programming language constructs",
keywords = "Agent-oriented programming",
keywords = "Functional programming",
keywords = "Object-oriented programming ",
abstract = "Abstract The number of programming languages is large and steadily increasing. However, little structured information and empirical evidence is available to help software engineers assess the suitability of a language for a particular development project or software architecture. We argue that these shortages are partly due to a lack of high-level, objective programming language feature assessment criteria: existing advice to practitioners is often based on ill-defined notions of ‘paradigms’ [3, p. xiii] and ‘orientation’, while researchers lack a shared common basis for generalisation and synthesis of empirical results. This paper presents a feature model constructed from the programmer's perspective, which can be used to precisely compare general-purpose programming languages in the actor-oriented, agent-oriented, functional, object-oriented, and procedural categories. The feature model is derived from the existing literature on general concepts of programming, and validated with concrete mappings of well-known languages in each of these categories. The model is intended to act as a tool for both practitioners and researchers, to facilitate both further high-level comparative studies of programming languages, and detailed investigations of feature usage and efficacy in specific development contexts. "
}

@article{harrison,
  author = "Harrison, R. and  Smaraweera ; Dobie ; Lewis",
  title = "Comparing programming paradigms: an evaluation of functional and object-oriented programs",
  journal = "Software Engineering Journal  (Volume:11 ,  Issue: 4 )",
  pages = {247 - 254},
  issn = {0268-6961},
  year = {1996}
}

@TechReport{Haskell-vs-ada,
  author =  "Hudak, P. and Jones, M.P.",
  title =   "Haskell vs. Ada vs. C++ vs. Awk vs. ...
                 An Experiment in Software Prototyping Productivity",
  institution = "Department of Computer Science, Yale University",
  year =    "1994",
  type =    "Research Report",
  number =  "YALEU/DCS/RR-1049",
  address =     "New Haven, CT",
  month =   "Oct"
}

@article{fpmatter,
 author = {Hughes, J.},
 title = {Why Functional Programming Matters},
 journal = {Comput. J.},
 issue_date = {April 1989},
 volume = {32},
 number = {2},
 month = apr,
 year = {1989},
 issn = {0010-4620},
 pages = {98--107},
 numpages = {10},
 url = {http://dx.doi.org/10.1093/comjnl/32.2.98},
 doi = {10.1093/comjnl/32.2.98},
 acmid = {63411},
 publisher = {Oxford University Press},
 address = {Oxford, UK},
} 

@misc{tiobe,
  title = {Tiobe index updated October 2015},
  howpublished = {\url{http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html}},
  note = {Accessed: 2015-10-06},
  author = {Tiobe}
}

@misc{play,
  title = {Play Framework},
  howpublished = {\url{https://github.com/playframework/playframework}},
  note = {Accessed: 2015-10-06},
  author = {Play}
}